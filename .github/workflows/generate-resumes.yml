name: Generate Resume PDFs

on:
  workflow_dispatch:
    inputs:
      send_to:
        description: 'Where to send the generated PDFs?'
        required: true
        type: choice
        options:
          - Release
          - Telegram
        default: 'Release'
      include_phone:
        description: 'Include phone number in PDF?'
        required: true
        type: boolean
        default: false
      use_custom_email:
        description: 'Use custom email instead of default emails?'
        required: true
        type: boolean
        default: false
      custom_email:
        description: 'Custom email to generate resume for'
        required: false
        type: string
        default: ''
      tg_filename:
        description: 'Custom filename for Telegram messages (without extension)'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Log workflow inputs
        run: |
          echo "=== Workflow Input Parameters ==="
          echo "Send to: ${{ github.event.inputs.send_to }}"
          echo "Include phone: ${{ github.event.inputs.include_phone }}"
          echo "Use custom email: ${{ github.event.inputs.use_custom_email }}"
          if [ -n "${{ github.event.inputs.custom_email }}" ]; then
            MASKED_EMAIL=$(echo "${{ github.event.inputs.custom_email }}" | sed 's/^[^@]*/****/')
            echo "Custom email: $MASKED_EMAIL"
          else
            echo "Custom email: (not provided)"
          fi
          echo "Telegram filename: ${{ github.event.inputs.tg_filename || '(not provided)' }}"
          echo "==============================="

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Setup Typst
        uses: typst-community/setup-typst@v4.1.0
        with:
          cache-dependency-path: src/main.typ

      - name: Get current date
        id: date
        run: |
          echo "tag_date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          echo "file_date=$(date +'%B_%Y' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%H%M%S')" >> $GITHUB_OUTPUT
          echo "release_name=$(date +'%Y.%m.%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Get last release tag
        if: github.event.inputs.send_to == 'Release'
        id: last_tag
        run: |
          git fetch --tags
          
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "last_tag=" >> $GITHUB_OUTPUT
          else
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          fi


      - name: Generate release notes
        if: github.event.inputs.send_to == 'Release'
        id: release_notes
        run: |
          RELEASE_NOTES_FILE=$(mktemp)

          echo "Changes made to the resume content since last release:" >> "$RELEASE_NOTES_FILE"

          if [ -n "${{ steps.last_tag.outputs.last_tag }}" ]; then
            if git log "${{ steps.last_tag.outputs.last_tag }}"..HEAD --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" -- src/main.typ >> "$RELEASE_NOTES_FILE" 2>/dev/null; then
              echo "Successfully added commit history to release notes"
            else
              echo "- Unable to get detailed commit history" >> "$RELEASE_NOTES_FILE"
              echo "- Please check the repository for recent changes" >> "$RELEASE_NOTES_FILE"
            fi
          else
            echo "No previous tag found, marking as initial release"
            echo "- Initial release" >> "$RELEASE_NOTES_FILE"
          fi

          # Read the file content and set it as output
          RELEASE_NOTES=$(cat "$RELEASE_NOTES_FILE")
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          rm "$RELEASE_NOTES_FILE"

      - name: Build PDFs for all emails
        env:
          RESUME_EMAILS: ${{ vars.RESUME_EMAILS }}
          RESUME_PHONE: ${{ vars.PHONE }}
          TELEGRAM_BOT_TOKEN: ${{ vars.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ vars.TELEGRAM_CHAT_ID }}
        run: |
          if [ "${{ github.event.inputs.use_custom_email }}" == "true" ]; then
            if [ -n "${{ github.event.inputs.custom_email }}" ]; then
              CUSTOM_EMAIL="${{ github.event.inputs.custom_email }}"
            else
              CUSTOM_EMAIL="$RESUME_EMAILS"
            fi
            if [ "${{ github.event.inputs.include_phone }}" == "true" ] && [ -n "$RESUME_PHONE" ]; then
              python3 scripts/generate_resumes.py -e "${CUSTOM_EMAIL}" -p "${RESUME_PHONE}" ${{ github.event.inputs.send_to == 'Telegram' && '-t' || '' }} ${{ github.event.inputs.tg_filename && format('-f "{0}"', github.event.inputs.tg_filename) || '' }}
            else
              python3 scripts/generate_resumes.py -e "${CUSTOM_EMAIL}" ${{ github.event.inputs.send_to == 'Telegram' && '-t' || '' }} ${{ github.event.inputs.tg_filename && format('-f "{0}"', github.event.inputs.tg_filename) || '' }}
            fi
          else
            if [ "${{ github.event.inputs.include_phone }}" == "true" ] && [ -n "$RESUME_PHONE" ]; then
              python3 scripts/generate_resumes.py -p "${RESUME_PHONE}" ${{ github.event.inputs.send_to == 'Telegram' && '-t' || '' }} ${{ github.event.inputs.tg_filename && format('-f "{0}"', github.event.inputs.tg_filename) || '' }}
            else
              python3 scripts/generate_resumes.py ${{ github.event.inputs.send_to == 'Telegram' && '-t' || '' }} ${{ github.event.inputs.tg_filename && format('-f "{0}"', github.event.inputs.tg_filename) || '' }}
            fi
          fi

      - name: Upload all generated PDFs as artifact
        if: github.event.inputs.include_phone == false
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdfs-${{ steps.date.outputs.tag_date }}
          path: dist/*.pdf
          retention-days: 7

      - name: Upload all generated PDFs as artifact (with phone)
        if: github.event.inputs.include_phone == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdfs-${{ steps.date.outputs.tag_date }}-with-phone
          path: dist/*.pdf
          retention-days: 1

      - name: Create Release
        if: github.event.inputs.send_to == 'Release'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.pdf
          tag_name: v${{ steps.date.outputs.release_name }}
          name: "v${{ steps.date.outputs.release_name }}"
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
